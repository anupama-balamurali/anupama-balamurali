 PROGRAM TO IMPLEMENT BREADTH FIRST SEARCH

#include <stdio.h>
#include <stdlib.h>
#define MAX 100
struct Queue {
    int front, rear;
    int capacity;
    int* array;
};
struct Queue* createQueue(int capacity) {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->rear = -1;
    queue->array = (int*)malloc(capacity * sizeof(int));
    return queue;
}
void enqueue(struct Queue* queue, int item) {
    if (queue->rear == queue->capacity - 1) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (queue->front == -1)
        queue->front = 0;
    queue->array[++queue->rear] = item;
}
int dequeue(struct Queue* queue) {
    if (queue->front == -1 || queue->front > queue->rear) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
  }
    int item = queue->array[queue->front++];
    return item;
}
int isEmpty(struct Queue* queue) {
    return queue->front == -1 || queue->front > queue->rear;
}
void bfs(int startVertex, int vertices, int graph[MAX][MAX]) {
    struct Queue* queue = createQueue(vertices);
    int visited[MAX] = {0};
    visited[startVertex] = 1;
    enqueue(queue, startVertex);
    printf("Breadth-First Traversal starting from vertex %d:\n", startVertex);
    while (!isEmpty(queue)) {
        int currentVertex = dequeue(queue);
        printf("%d ", currentVertex);
        for (int i = 0; i < vertices; i++) {
            if (graph[currentVertex][i] && !visited[i]) {
                visited[i] = 1;
                enqueue(queue, i);
            }
        }
    }
    free(queue->array);
    free(queue);
}
int main() {
    int vertices;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    int graph[MAX][MAX];
    printf("Enter the adjacency matrix (1 for connection, 0 for no connection):\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    int startVertex;
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    bfs(startVertex, vertices, graph);
    return 0;
}
