PROGRAM TO IMPLEMENT SINGLE SOURCE SHORTEST PATH

#include <stdio.h>
#include <limits.h>
#define MAX 100
int graph[MAX][MAX];
int vertices;
void dijkstra(int startVertex) {
    int distance[MAX];
    int visited[MAX];
    // Initialize distance and visited arrays
    for (int i = 0; i < vertices; i++) {
        distance[i] = INT_MAX;
        visited[i] = 0;
    }
    // Distance from the start vertex to itself is 0
    distance[startVertex] = 0;
    // Find shortest path for all vertices
    for (int count = 0; count < vertices - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet processed
        int minDistance = INT_MAX, minIndex;
        for (int v = 0; v < vertices; v++) {
            if (!visited[v] && distance[v] <= minDistance) {
                minDistance = distance[v];
                minIndex = v;
            }
        }
        // Mark the picked vertex as visited
        visited[minIndex] = 1;
        // Update distance value of the adjacent vertices of the picked vertex
        for (int v = 0; v < vertices; v++) {
            if (!visited[v] && graph[minIndex][v] && distance[minIndex] != INT_MAX &&
                distance[minIndex] + graph[minIndex][v] < distance[v]) {
                distance[v] = distance[minIndex] + graph[minIndex][v];
            }
        }
    }
    // Print the calculated distances
    printf("Shortest distances from vertex %d:\n", startVertex);
    for (int i = 0; i < vertices; i++) {
        printf("Vertex %d: %d\n", i, distance[i]);
    }
}
int main() {
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the adjacency matrix (0 for no edge, positive weight for edge):\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    int startVertex;
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    dijkstra(startVertex);
    return 0;
}
